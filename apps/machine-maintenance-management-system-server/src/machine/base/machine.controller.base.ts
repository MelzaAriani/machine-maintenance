/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MachineService } from "../machine.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MachineCreateInput } from "./MachineCreateInput";
import { Machine } from "./Machine";
import { MachineFindManyArgs } from "./MachineFindManyArgs";
import { MachineWhereUniqueInput } from "./MachineWhereUniqueInput";
import { MachineUpdateInput } from "./MachineUpdateInput";
import { BreakdownFindManyArgs } from "../../breakdown/base/BreakdownFindManyArgs";
import { Breakdown } from "../../breakdown/base/Breakdown";
import { BreakdownWhereUniqueInput } from "../../breakdown/base/BreakdownWhereUniqueInput";
import { MaintenanceFindManyArgs } from "../../maintenance/base/MaintenanceFindManyArgs";
import { Maintenance } from "../../maintenance/base/Maintenance";
import { MaintenanceWhereUniqueInput } from "../../maintenance/base/MaintenanceWhereUniqueInput";
import { MaintenanceScheduleFindManyArgs } from "../../maintenanceSchedule/base/MaintenanceScheduleFindManyArgs";
import { MaintenanceSchedule } from "../../maintenanceSchedule/base/MaintenanceSchedule";
import { MaintenanceScheduleWhereUniqueInput } from "../../maintenanceSchedule/base/MaintenanceScheduleWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MachineControllerBase {
  constructor(
    protected readonly service: MachineService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Machine })
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: MachineCreateInput,
  })
  async createMachine(
    @common.Body() data: MachineCreateInput
  ): Promise<Machine> {
    return await this.service.createMachine({
      data: data,
      select: {
        createdAt: true,
        id: true,
        location: true,
        modelNumber: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Machine] })
  @ApiNestedQuery(MachineFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async machines(@common.Req() request: Request): Promise<Machine[]> {
    const args = plainToClass(MachineFindManyArgs, request.query);
    return this.service.machines({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        modelNumber: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Machine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async machine(
    @common.Param() params: MachineWhereUniqueInput
  ): Promise<Machine | null> {
    const result = await this.service.machine({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        modelNumber: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Machine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: MachineUpdateInput,
  })
  async updateMachine(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() data: MachineUpdateInput
  ): Promise<Machine | null> {
    try {
      return await this.service.updateMachine({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          location: true,
          modelNumber: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Machine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMachine(
    @common.Param() params: MachineWhereUniqueInput
  ): Promise<Machine | null> {
    try {
      return await this.service.deleteMachine({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          modelNumber: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/breakdowns")
  @ApiNestedQuery(BreakdownFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Breakdown",
    action: "read",
    possession: "any",
  })
  async findBreakdowns(
    @common.Req() request: Request,
    @common.Param() params: MachineWhereUniqueInput
  ): Promise<Breakdown[]> {
    const query = plainToClass(BreakdownFindManyArgs, request.query);
    const results = await this.service.findBreakdowns(params.id, {
      ...query,
      select: {
        breakdownDate: true,
        createdAt: true,
        description: true,
        id: true,

        machine: {
          select: {
            id: true,
          },
        },

        reporter: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/breakdowns")
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async connectBreakdowns(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() body: BreakdownWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      breakdowns: {
        connect: body,
      },
    };
    await this.service.updateMachine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/breakdowns")
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async updateBreakdowns(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() body: BreakdownWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      breakdowns: {
        set: body,
      },
    };
    await this.service.updateMachine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/breakdowns")
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async disconnectBreakdowns(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() body: BreakdownWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      breakdowns: {
        disconnect: body,
      },
    };
    await this.service.updateMachine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/maintenances")
  @ApiNestedQuery(MaintenanceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Maintenance",
    action: "read",
    possession: "any",
  })
  async findMaintenances(
    @common.Req() request: Request,
    @common.Param() params: MachineWhereUniqueInput
  ): Promise<Maintenance[]> {
    const query = plainToClass(MaintenanceFindManyArgs, request.query);
    const results = await this.service.findMaintenances(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        machine: {
          select: {
            id: true,
          },
        },

        maintenanceDate: true,
        reporter: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenances")
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async connectMaintenances(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() body: MaintenanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenances: {
        connect: body,
      },
    };
    await this.service.updateMachine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenances")
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async updateMaintenances(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() body: MaintenanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenances: {
        set: body,
      },
    };
    await this.service.updateMachine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenances")
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async disconnectMaintenances(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() body: MaintenanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenances: {
        disconnect: body,
      },
    };
    await this.service.updateMachine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/maintenanceSchedules")
  @ApiNestedQuery(MaintenanceScheduleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceSchedule",
    action: "read",
    possession: "any",
  })
  async findMaintenanceSchedules(
    @common.Req() request: Request,
    @common.Param() params: MachineWhereUniqueInput
  ): Promise<MaintenanceSchedule[]> {
    const query = plainToClass(MaintenanceScheduleFindManyArgs, request.query);
    const results = await this.service.findMaintenanceSchedules(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        interval: true,

        machine: {
          select: {
            id: true,
          },
        },

        scheduleDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceSchedules")
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async connectMaintenanceSchedules(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() body: MaintenanceScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceSchedules: {
        connect: body,
      },
    };
    await this.service.updateMachine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceSchedules")
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceSchedules(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() body: MaintenanceScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceSchedules: {
        set: body,
      },
    };
    await this.service.updateMachine({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceSchedules")
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async disconnectMaintenanceSchedules(
    @common.Param() params: MachineWhereUniqueInput,
    @common.Body() body: MaintenanceScheduleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceSchedules: {
        disconnect: body,
      },
    };
    await this.service.updateMachine({
      where: params,
      data,
      select: { id: true },
    });
  }
}
