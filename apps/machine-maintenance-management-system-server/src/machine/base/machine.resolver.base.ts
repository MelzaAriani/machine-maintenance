/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Machine } from "./Machine";
import { MachineCountArgs } from "./MachineCountArgs";
import { MachineFindManyArgs } from "./MachineFindManyArgs";
import { MachineFindUniqueArgs } from "./MachineFindUniqueArgs";
import { CreateMachineArgs } from "./CreateMachineArgs";
import { UpdateMachineArgs } from "./UpdateMachineArgs";
import { DeleteMachineArgs } from "./DeleteMachineArgs";
import { BreakdownFindManyArgs } from "../../breakdown/base/BreakdownFindManyArgs";
import { Breakdown } from "../../breakdown/base/Breakdown";
import { MaintenanceFindManyArgs } from "../../maintenance/base/MaintenanceFindManyArgs";
import { Maintenance } from "../../maintenance/base/Maintenance";
import { MaintenanceScheduleFindManyArgs } from "../../maintenanceSchedule/base/MaintenanceScheduleFindManyArgs";
import { MaintenanceSchedule } from "../../maintenanceSchedule/base/MaintenanceSchedule";
import { MachineService } from "../machine.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Machine)
export class MachineResolverBase {
  constructor(
    protected readonly service: MachineService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "any",
  })
  async _machinesMeta(
    @graphql.Args() args: MachineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Machine])
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "any",
  })
  async machines(
    @graphql.Args() args: MachineFindManyArgs
  ): Promise<Machine[]> {
    return this.service.machines(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Machine, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "own",
  })
  async machine(
    @graphql.Args() args: MachineFindUniqueArgs
  ): Promise<Machine | null> {
    const result = await this.service.machine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Machine)
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "create",
    possession: "any",
  })
  async createMachine(
    @graphql.Args() args: CreateMachineArgs
  ): Promise<Machine> {
    return await this.service.createMachine({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Machine)
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "update",
    possession: "any",
  })
  async updateMachine(
    @graphql.Args() args: UpdateMachineArgs
  ): Promise<Machine | null> {
    try {
      return await this.service.updateMachine({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Machine)
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "delete",
    possession: "any",
  })
  async deleteMachine(
    @graphql.Args() args: DeleteMachineArgs
  ): Promise<Machine | null> {
    try {
      return await this.service.deleteMachine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Breakdown], { name: "breakdowns" })
  @nestAccessControl.UseRoles({
    resource: "Breakdown",
    action: "read",
    possession: "any",
  })
  async findBreakdowns(
    @graphql.Parent() parent: Machine,
    @graphql.Args() args: BreakdownFindManyArgs
  ): Promise<Breakdown[]> {
    const results = await this.service.findBreakdowns(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Maintenance], { name: "maintenances" })
  @nestAccessControl.UseRoles({
    resource: "Maintenance",
    action: "read",
    possession: "any",
  })
  async findMaintenances(
    @graphql.Parent() parent: Machine,
    @graphql.Args() args: MaintenanceFindManyArgs
  ): Promise<Maintenance[]> {
    const results = await this.service.findMaintenances(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceSchedule], {
    name: "maintenanceSchedules",
  })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceSchedule",
    action: "read",
    possession: "any",
  })
  async findMaintenanceSchedules(
    @graphql.Parent() parent: Machine,
    @graphql.Args() args: MaintenanceScheduleFindManyArgs
  ): Promise<MaintenanceSchedule[]> {
    const results = await this.service.findMaintenanceSchedules(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
