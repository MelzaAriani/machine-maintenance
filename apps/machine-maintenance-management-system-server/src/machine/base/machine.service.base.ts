/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Machine as PrismaMachine,
  BreakdownReport as PrismaBreakdownReport,
  MaintenanceReport as PrismaMaintenanceReport,
  MaintenanceSchedule as PrismaMaintenanceSchedule,
} from "@prisma/client";

export class MachineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MachineCountArgs, "select">): Promise<number> {
    return this.prisma.machine.count(args);
  }

  async machines<T extends Prisma.MachineFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MachineFindManyArgs>
  ): Promise<PrismaMachine[]> {
    return this.prisma.machine.findMany<Prisma.MachineFindManyArgs>(args);
  }
  async machine<T extends Prisma.MachineFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MachineFindUniqueArgs>
  ): Promise<PrismaMachine | null> {
    return this.prisma.machine.findUnique(args);
  }
  async createMachine<T extends Prisma.MachineCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MachineCreateArgs>
  ): Promise<PrismaMachine> {
    return this.prisma.machine.create<T>(args);
  }
  async updateMachine<T extends Prisma.MachineUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MachineUpdateArgs>
  ): Promise<PrismaMachine> {
    return this.prisma.machine.update<T>(args);
  }
  async deleteMachine<T extends Prisma.MachineDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MachineDeleteArgs>
  ): Promise<PrismaMachine> {
    return this.prisma.machine.delete(args);
  }

  async findBreakdowns(
    parentId: string,
    args: Prisma.BreakdownReportFindManyArgs
  ): Promise<PrismaBreakdownReport[]> {
    return this.prisma.machine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .breakdowns(args);
  }

  async findMaintenances(
    parentId: string,
    args: Prisma.MaintenanceReportFindManyArgs
  ): Promise<PrismaMaintenanceReport[]> {
    return this.prisma.machine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .maintenances(args);
  }

  async findMaintenanceSchedules(
    parentId: string,
    args: Prisma.MaintenanceScheduleFindManyArgs
  ): Promise<PrismaMaintenanceSchedule[]> {
    return this.prisma.machine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .maintenanceSchedules(args);
  }
}
