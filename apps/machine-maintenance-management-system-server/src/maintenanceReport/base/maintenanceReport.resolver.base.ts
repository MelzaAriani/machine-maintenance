/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MaintenanceReport } from "./MaintenanceReport";
import { MaintenanceReportCountArgs } from "./MaintenanceReportCountArgs";
import { MaintenanceReportFindManyArgs } from "./MaintenanceReportFindManyArgs";
import { MaintenanceReportFindUniqueArgs } from "./MaintenanceReportFindUniqueArgs";
import { CreateMaintenanceReportArgs } from "./CreateMaintenanceReportArgs";
import { UpdateMaintenanceReportArgs } from "./UpdateMaintenanceReportArgs";
import { DeleteMaintenanceReportArgs } from "./DeleteMaintenanceReportArgs";
import { Machine } from "../../machine/base/Machine";
import { MaintenanceReportService } from "../maintenanceReport.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MaintenanceReport)
export class MaintenanceReportResolverBase {
  constructor(
    protected readonly service: MaintenanceReportService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceReport",
    action: "read",
    possession: "any",
  })
  async _maintenanceReportsMeta(
    @graphql.Args() args: MaintenanceReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MaintenanceReport])
  @nestAccessControl.UseRoles({
    resource: "MaintenanceReport",
    action: "read",
    possession: "any",
  })
  async maintenanceReports(
    @graphql.Args() args: MaintenanceReportFindManyArgs
  ): Promise<MaintenanceReport[]> {
    return this.service.maintenanceReports(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MaintenanceReport, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceReport",
    action: "read",
    possession: "own",
  })
  async maintenanceReport(
    @graphql.Args() args: MaintenanceReportFindUniqueArgs
  ): Promise<MaintenanceReport | null> {
    const result = await this.service.maintenanceReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceReport)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceReport",
    action: "create",
    possession: "any",
  })
  async createMaintenanceReport(
    @graphql.Args() args: CreateMaintenanceReportArgs
  ): Promise<MaintenanceReport> {
    return await this.service.createMaintenanceReport({
      ...args,
      data: {
        ...args.data,

        machine: args.data.machine
          ? {
              connect: args.data.machine,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceReport)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceReport",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceReport(
    @graphql.Args() args: UpdateMaintenanceReportArgs
  ): Promise<MaintenanceReport | null> {
    try {
      return await this.service.updateMaintenanceReport({
        ...args,
        data: {
          ...args.data,

          machine: args.data.machine
            ? {
                connect: args.data.machine,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MaintenanceReport)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceReport",
    action: "delete",
    possession: "any",
  })
  async deleteMaintenanceReport(
    @graphql.Args() args: DeleteMaintenanceReportArgs
  ): Promise<MaintenanceReport | null> {
    try {
      return await this.service.deleteMaintenanceReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Machine, {
    nullable: true,
    name: "machine",
  })
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "any",
  })
  async getMachine(
    @graphql.Parent() parent: MaintenanceReport
  ): Promise<Machine | null> {
    const result = await this.service.getMachine(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
