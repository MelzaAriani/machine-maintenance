/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Breakdown } from "./Breakdown";
import { BreakdownCountArgs } from "./BreakdownCountArgs";
import { BreakdownFindManyArgs } from "./BreakdownFindManyArgs";
import { BreakdownFindUniqueArgs } from "./BreakdownFindUniqueArgs";
import { CreateBreakdownArgs } from "./CreateBreakdownArgs";
import { UpdateBreakdownArgs } from "./UpdateBreakdownArgs";
import { DeleteBreakdownArgs } from "./DeleteBreakdownArgs";
import { Machine } from "../../machine/base/Machine";
import { BreakdownService } from "../breakdown.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Breakdown)
export class BreakdownResolverBase {
  constructor(
    protected readonly service: BreakdownService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Breakdown",
    action: "read",
    possession: "any",
  })
  async _breakdownsMeta(
    @graphql.Args() args: BreakdownCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Breakdown])
  @nestAccessControl.UseRoles({
    resource: "Breakdown",
    action: "read",
    possession: "any",
  })
  async breakdowns(
    @graphql.Args() args: BreakdownFindManyArgs
  ): Promise<Breakdown[]> {
    return this.service.breakdowns(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Breakdown, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Breakdown",
    action: "read",
    possession: "own",
  })
  async breakdown(
    @graphql.Args() args: BreakdownFindUniqueArgs
  ): Promise<Breakdown | null> {
    const result = await this.service.breakdown(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Breakdown)
  @nestAccessControl.UseRoles({
    resource: "Breakdown",
    action: "create",
    possession: "any",
  })
  async createBreakdown(
    @graphql.Args() args: CreateBreakdownArgs
  ): Promise<Breakdown> {
    return await this.service.createBreakdown({
      ...args,
      data: {
        ...args.data,

        machine: args.data.machine
          ? {
              connect: args.data.machine,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Breakdown)
  @nestAccessControl.UseRoles({
    resource: "Breakdown",
    action: "update",
    possession: "any",
  })
  async updateBreakdown(
    @graphql.Args() args: UpdateBreakdownArgs
  ): Promise<Breakdown | null> {
    try {
      return await this.service.updateBreakdown({
        ...args,
        data: {
          ...args.data,

          machine: args.data.machine
            ? {
                connect: args.data.machine,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Breakdown)
  @nestAccessControl.UseRoles({
    resource: "Breakdown",
    action: "delete",
    possession: "any",
  })
  async deleteBreakdown(
    @graphql.Args() args: DeleteBreakdownArgs
  ): Promise<Breakdown | null> {
    try {
      return await this.service.deleteBreakdown(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Machine, {
    nullable: true,
    name: "machine",
  })
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "any",
  })
  async getMachine(
    @graphql.Parent() parent: Breakdown
  ): Promise<Machine | null> {
    const result = await this.service.getMachine(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
