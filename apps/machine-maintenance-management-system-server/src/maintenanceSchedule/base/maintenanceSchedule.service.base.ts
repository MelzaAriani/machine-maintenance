/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MaintenanceSchedule as PrismaMaintenanceSchedule,
  Machine as PrismaMachine,
} from "@prisma/client";

export class MaintenanceScheduleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MaintenanceScheduleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.maintenanceSchedule.count(args);
  }

  async maintenanceSchedules<T extends Prisma.MaintenanceScheduleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleFindManyArgs>
  ): Promise<PrismaMaintenanceSchedule[]> {
    return this.prisma.maintenanceSchedule.findMany<Prisma.MaintenanceScheduleFindManyArgs>(
      args
    );
  }
  async maintenanceSchedule<T extends Prisma.MaintenanceScheduleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleFindUniqueArgs>
  ): Promise<PrismaMaintenanceSchedule | null> {
    return this.prisma.maintenanceSchedule.findUnique(args);
  }
  async createMaintenanceSchedule<
    T extends Prisma.MaintenanceScheduleCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleCreateArgs>
  ): Promise<PrismaMaintenanceSchedule> {
    return this.prisma.maintenanceSchedule.create<T>(args);
  }
  async updateMaintenanceSchedule<
    T extends Prisma.MaintenanceScheduleUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleUpdateArgs>
  ): Promise<PrismaMaintenanceSchedule> {
    return this.prisma.maintenanceSchedule.update<T>(args);
  }
  async deleteMaintenanceSchedule<
    T extends Prisma.MaintenanceScheduleDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.MaintenanceScheduleDeleteArgs>
  ): Promise<PrismaMaintenanceSchedule> {
    return this.prisma.maintenanceSchedule.delete(args);
  }

  async getMachine(parentId: string): Promise<PrismaMachine | null> {
    return this.prisma.maintenanceSchedule
      .findUnique({
        where: { id: parentId },
      })
      .machine();
  }
}
