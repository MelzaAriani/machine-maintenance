/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BreakdownReport as PrismaBreakdownReport,
  Machine as PrismaMachine,
} from "@prisma/client";

export class BreakdownReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BreakdownReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.breakdownReport.count(args);
  }

  async breakdownReports<T extends Prisma.BreakdownReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BreakdownReportFindManyArgs>
  ): Promise<PrismaBreakdownReport[]> {
    return this.prisma.breakdownReport.findMany<Prisma.BreakdownReportFindManyArgs>(
      args
    );
  }
  async breakdownReport<T extends Prisma.BreakdownReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BreakdownReportFindUniqueArgs>
  ): Promise<PrismaBreakdownReport | null> {
    return this.prisma.breakdownReport.findUnique(args);
  }
  async createBreakdownReport<T extends Prisma.BreakdownReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BreakdownReportCreateArgs>
  ): Promise<PrismaBreakdownReport> {
    return this.prisma.breakdownReport.create<T>(args);
  }
  async updateBreakdownReport<T extends Prisma.BreakdownReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BreakdownReportUpdateArgs>
  ): Promise<PrismaBreakdownReport> {
    return this.prisma.breakdownReport.update<T>(args);
  }
  async deleteBreakdownReport<T extends Prisma.BreakdownReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BreakdownReportDeleteArgs>
  ): Promise<PrismaBreakdownReport> {
    return this.prisma.breakdownReport.delete(args);
  }

  async getMachine(parentId: string): Promise<PrismaMachine | null> {
    return this.prisma.breakdownReport
      .findUnique({
        where: { id: parentId },
      })
      .machine();
  }
}
